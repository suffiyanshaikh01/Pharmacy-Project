package com.authorizationService.demo.controller;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.test.context.junit4.SpringRunner;

import com.authorizationService.demo.jwt.JwtRequest;
import com.authorizationService.demo.jwt.JwtUtil;

import jdk.internal.jline.internal.Log;
import lombok.extern.slf4j.Slf4j;

@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
@AutoConfigureMockMvc
class UserControllerTest {

	@Test
	public void test1() {
		assertTrue(true);
	}
	
	@InjectMocks
	UserController userController;

	@Mock 
	UserDetailsService userDetailsService;
	
	@Mock
	JwtRequest jwtRequest;

	@Mock
	private JwtUtil jwtTokenUtil;
	
	/*
	 * @Test public void contextLoads() { String s = userController.hello();
	 * Log.info(s); assertEquals("Hello", s); }
	 */
	
//	  @Test public void testCreateAuthenticationTokenPositiveCase() throws Exception {
//	  log.info("testCreateAuthenticationTokenPositiveCase START"); 
//	  String
//	  createAuthenticationToken =
//	  userController.createAuthenticationToken(jwtRequest);
//	  assertNotNull(createAuthenticationToken); assertTrue(true);
//	  log.info("testCreateAuthenticationTokenPositiveCase END"); }
	
	@Test
	public void testLogin() throws Exception{
		JwtRequest authenticationRequest = new JwtRequest("qwe", "123");
		UserDetails user = new User(authenticationRequest.getUsername(), authenticationRequest.getPassword(), new ArrayList<>());
		UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		String token = jwtTokenUtil.generateToken(userDetails);
		
		when(userDetailsService.loadUserByUsername(authenticationRequest.getUsername())).thenReturn(user);
		when(jwtTokenUtil.generateToken(userDetails)).thenReturn(token);
		
		assertEquals("token", userController.createAuthenticationToken(authenticationRequest));

	}
	 
}
