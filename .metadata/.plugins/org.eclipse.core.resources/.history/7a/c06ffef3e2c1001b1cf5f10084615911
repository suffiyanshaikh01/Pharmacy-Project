package com.authorizationService.demo.controller;

[1:05 PM] Dubey, Shivam (Cognizant)

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;

import com.authorizationService.demo.jwt.JwtRequest;
import com.authorizationService.demo.jwt.JwtUtil;
import com.authorizationService.demo.jwt.MyUserDetailsService;

import lombok.extern.slf4j.Slf4j;

//@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
//@AutoConfigureMockMvc
class UserControllerTest {

	@Test
	public void test1() {
		assertTrue(true);
	}
	
	@InjectMocks
	UserController userController;

	@Mock 
	MyUserDetailsService userDetailsService;
	
	//@Mock
//	JwtRequest jwtRequest;

	@Mock
	private JwtUtil jwtTokenUtil;
	
	/*
	 * @Test public void contextLoads() { String s = userController.hello();
	 * Log.info(s); assertEquals("Hello", s); }
	 */
	
//	  @Test public void testCreateAuthenticationTokenPositiveCase() throws Exception {
//	  log.info("testCreateAuthenticationTokenPositiveCase START"); 
//	  String
//	  createAuthenticationToken =
//	  userController.createAuthenticationToken(jwtRequest);
//	  assertNotNull(createAuthenticationToken); assertTrue(true);
//	  log.info("testCreateAuthenticationTokenPositiveCase END"); }
	
//	AuthenticationRequest user = new AuthenticationRequest("mayur012", "test12345");
//	UserDetails userDetails = new User(user.getUserName(), user.getPassword(), new ArrayList<>());
//	UserDetails loadUserByUsername = authService.loadUserByUsername("mayur012");
//	when(authService.loadUserByUsername("mayur012")).thenReturn(userDetails);
//	when(jwtUtil.generateToken(loadUserByUsername)).thenReturn("token");
//	ResponseEntity<?> login = authController.createAuthorizationToken(user);
//	assertEquals(200, login.getStatusCodeValue());
	
	@Test
	public void testLogin() throws Exception{
		JwtRequest authenticationRequest = new JwtRequest("Sufiyan", "1234");
		System.out.println(authenticationRequest);
		UserDetails user = new User(authenticationRequest.getUsername(), authenticationRequest.getPassword(), new ArrayList<>());
		System.out.println(user);
		UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		System.out.println(userDetails);
		when(userDetailsService.loadUserByUsername(authenticationRequest.getUsername())).thenReturn(user);
		when(jwtTokenUtil.generateToken(userDetails)).thenReturn("token");
		
		assertEquals("token", userController.createAuthenticationToken(authenticationRequest));

	}
	 
}
