package com.authorizationService.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.authorizationService.demo.jwt.JwtRequest;
import com.authorizationService.demo.jwt.JwtUtil;
import com.authorizationService.demo.model.User;
import com.authorizationService.demo.service.UserService;

@RestController
@RequestMapping("/login")
public class UserController {

	@Autowired
	UserService userService;

	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtUtil jwtTokenUtil;
	@Autowired
	private UserDetailsService userDetailsService;

//	@PostMapping("/addUser")
//	public String register(@RequestBody User u) {
//		return userService.register(u);
//	}

//	@GetMapping("/{userName}/{password}")
//	public boolean login(@PathVariable String userName, @PathVariable String password) {
//		return userService.login(userName, password);
//	}

//	@GetMapping("/{userName}")
//	public User getByUserName(@PathVariable String userName) {
//		return userService.getByUsername(userName);
//	}

	@GetMapping("/")
	public Boolean validateToken() {
		return true;
		
	}

	@PostMapping("/getToken")
	public String createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) throws Exception {
		try {
		authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());
		} catch(Exception InvalidUserException) {
			System.out.println("INVALID CREDENTIATLS");
			return null;
		}
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		final String token = jwtTokenUtil.generateToken(userDetails);
		System.out.println(token);
		return token;
	}

	private void authenticate(String username, String password) throws Exception {
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		} catch (DisabledException e) {
			throw new Exception("USER_DISABLED", e);
		} catch (BadCredentialsException e) {
			throw new Exception("INVALID_CREDENTIALS", e);
		}
	}

}
