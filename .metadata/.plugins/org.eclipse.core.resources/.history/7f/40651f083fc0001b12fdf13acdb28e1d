package com.webportal.feignTest;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.List;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;

import com.webportal.feign.MedicineStockClient;
import com.webportal.feign.PharmacySupplyClient;
import com.webportal.vomodel.MedicineDemandVO;
import com.webportal.vomodel.MedicineStockVO;
import com.webportal.vomodel.PharmacyMedicineSupplyVO;

import lombok.extern.slf4j.Slf4j;


@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
@AutoConfigureMockMvc
class FeignTest {
	@Mock
	private MedicineStockVO medicineStock;
	@Mock
	private MedicineStockClient medicineClient;
	@Mock
	private List<MedicineStockVO> medicineStockList;
	@Mock
	PharmacySupplyClient pharmacyClient;
//	@InjectMocks
//	PharmacySupplyClient pharmacyClient1;
	@Mock
	PharmacyMedicineSupplyVO pharmacyMedicineSupply;
	@Mock
	List<PharmacyMedicineSupplyVO> pharmacyMedicineSupplyList;
	@Mock
	MedicineDemandVO medDemandPositive,medDemandNegative;
	@Mock
	List<MedicineDemandVO> medDemandList;
	
	private LocalDate date = LocalDate.of(2022, 9, 12);
	
	@Before
	public void setup() {
		log.info("START");
		medicineStock = new MedicineStockVO();
		medicineStock.setMedicineId(1);
		medicineStock.setMedicineName("Crocin");
		medicineStock.setChemicalComposition("disaccharide gentiobiose, dicarboxylic acid crocetin");
		medicineStock.setTargetAilment("General");
		medicineStock.setGodownName("Healthy Pharmacy");
		medicineStock.setDateOfExpiry(date);
		medicineStock.setNumberOfTabletsInStock(200);
		log.info("END");
		medDemandPositive.setMedicineName("Crocin");
		medDemandPositive.setDemandCount(20);
		medDemandPositive.setStatus("");
		
		medDemandNegative.setMedicineName("XYZ");
		medDemandNegative.setDemandCount(20);
		medDemandNegative.setStatus("");
		medDemandList.add(medDemandPositive);
		medicineStockList.add(medicineStock);
		
		pharmacyMedicineSupply.setMedicineName("Crocin");
		pharmacyMedicineSupply.setPharmacyName("Newlife Medical");
		pharmacyMedicineSupply.setSupplyCount(1);
		pharmacyMedicineSupplyList.add(pharmacyMedicineSupply);
		
	}
	
	//MedicineStock Feign test-cases
	
	@Test
	public void testGetAllMedicineStockPositiveCase() {
		log.info("testGetAllMedicineStockPositiveCase START");
		when(medicineClient.getAllMedicineStock())
	       .thenReturn(new ResponseEntity<List<MedicineStockVO>>(medicineStockList,HttpStatus.OK));
		ResponseEntity<List<MedicineStockVO>> allMedicineStock = medicineClient.getAllMedicineStock();
		assertNotNull(allMedicineStock.getBody());
		assertEquals(HttpStatus.OK, allMedicineStock.getStatusCode());
		log.info("testGetAllMedicineStockPositiveCase END");
	}
	
	@Test
	public void testGetAllMedicineStockNegativeCase() {
		log.info("testGetAllMedicineStockNegativeCase START");
		when(medicineClient.getAllMedicineStock())
	       .thenReturn(new ResponseEntity<List<MedicineStockVO>>(medicineStockList,HttpStatus.INTERNAL_SERVER_ERROR));
		ResponseEntity<List<MedicineStockVO>> allMedicineStock = medicineClient.getAllMedicineStock();
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, allMedicineStock.getStatusCode());
		log.info("testGetAllMedicineStockNegativeCase END");
	}
	
	//PharmacyMedicineSupply Feign test-cases
	
	@Test
	public void testGetAllPharmacySupplyPositiveCase() {
		log.info("testGetAllPharmacySupplyPositiveCase START");
		when(pharmacyClient.getAllPharmacySupply())
		.thenReturn(new ResponseEntity<List<PharmacyMedicineSupplyVO>>(pharmacyMedicineSupplyList,HttpStatus.OK));
		ResponseEntity<List<PharmacyMedicineSupplyVO>> allPharmacySupply = pharmacyClient.getAllPharmacySupply();
		assertNotNull(allPharmacySupply.getBody());
		assertEquals(HttpStatus.OK, allPharmacySupply.getStatusCode());
		log.info("testGetAllPharmacySupplyPositiveCase END");
	}
	
	@Test
	public void testGetAllPharmacySupplyNegativeCase() {
		log.info("testGetAllPharmacySupplyNegativeCase START");
		when(pharmacyClient.getAllPharmacySupply())
		.thenReturn(new ResponseEntity<List<PharmacyMedicineSupplyVO>>(pharmacyMedicineSupplyList,HttpStatus.INTERNAL_SERVER_ERROR));
		ResponseEntity<List<PharmacyMedicineSupplyVO>> allPharmacySupply = pharmacyClient.getAllPharmacySupply();
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, allPharmacySupply.getStatusCode());
		log.info("testGetAllPharmacySupplyNegativeCase END");
	}
	
	@Test
	public void testGetDemandPositiveCase() {
		log.info("testGetDemandPositiveCase START");
		when(pharmacyClient.getDemand())
		.thenReturn(new ResponseEntity<List<MedicineDemandVO>>(medDemandList,HttpStatus.OK));
		ResponseEntity<List<MedicineDemandVO>> demand = pharmacyClient.getDemand();
		assertNotNull(demand.getBody());
		assertEquals(HttpStatus.OK, demand.getStatusCode());
		log.info("testGetDemandPositiveCase END");
	}
	
	@Test
	public void testGetDemandNegativeCase() {
		log.info("testGetDemandNegativeCase START");
		when(pharmacyClient.getDemand())
		.thenReturn(new ResponseEntity<List<MedicineDemandVO>>(medDemandList,HttpStatus.INTERNAL_SERVER_ERROR));
		ResponseEntity<List<MedicineDemandVO>> demand = pharmacyClient.getDemand();
		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, demand.getStatusCode());
		log.info("testGetDemandNegativeCase END");
	}
	
	@Test
	public void testGetPharmacySupplyPositiveCase() {
		log.info("testGetPharmacySupplyPositiveCase START");
		when(pharmacyClient.getPharmacySupply(medDemandPositive))
		.thenReturn(new ResponseEntity<List<PharmacyMedicineSupplyVO>>(pharmacyMedicineSupplyList,HttpStatus.OK));
		ResponseEntity<List<PharmacyMedicineSupplyVO>> allPharmacySupply = pharmacyClient.getPharmacySupply(medDemandPositive);
		assertNotNull(allPharmacySupply.getBody());
		assertEquals(HttpStatus.OK, allPharmacySupply.getStatusCode());
		log.info("testGetPharmacySupplyPositiveCase END");
	}
	
//	@Test
//	public void testGetPharmacySupplyNegativeCase() {
//		log.info("testGetPharmacySupplyNegativeCase START");
//		List<PharmacyMedicineSupplyVO> nullList = null;
//		when(pharmacyClient.getPharmacySupply(medDemandNegative))
//		.thenReturn(new ResponseEntity<List<PharmacyMedicineSupplyVO>>(nullList,HttpStatus.INTERNAL_SERVER_ERROR));
//		ResponseEntity<List<PharmacyMedicineSupplyVO>> allPharmacySupply = pharmacyClient.getAllPharmacySupply();
//		assertNull(allPharmacySupply.getBody());
//		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, allPharmacySupply.getStatusCode());
//		log.info("testGetPharmacySupplyNegativeCase END");
//	}
	
}

























